{"version":3,"sources":["style/Main.tsx","utils/constants.ts","components/DrawBoard/helpers.ts","components/DrawBoard/Board.tsx","components/DrawBoard/index.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Main","styled","main","SVG_DIMS","width","height","normalize","value","maxValue","panelDim","Board","input","useMemo","certificate","points","top","left","bits","maxTop","i","length","push","strPoints","forEach","point","concat","bit","levels","createSVGPointsFromCert","Wrapper","SVG","viewBox","id","refX","refY","markerWidth","markerHeight","stroke","strokeWidth","fill","cx","cy","r","SVGPolyline","markerStart","markerEnd","markerMid","map","levelValue","SVGLevelPolyline","SVGText","x","y","div","svg","polyline","text","DrawBoard","onClose","useState","inputValue","setInputValue","CloseButton","onClick","Input","type","onChange","event","target","button","App","boardIds","setBoardIds","newBoardIds","filter","boardId","removeDrawBoard","Placeholder","AddIcon","FiPlus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32b33cb8.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Main = styled.main`\r\n  margin: 2rem;\r\n  display: flex;\r\n  min-width: 36rem;\r\n  height: 30rem;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n`;\r\n","export const SVG_DIMS = { width: 580, height: 400 };\r\n","import { SVG_DIMS } from '../../utils/constants';\r\n\r\ntype SVGPoint = { left: number; top: number };\r\ntype CertificateBit = { value: string; left: number };\r\n\r\nexport function normalize(value: number, maxValue: number, panelDim: number): number {\r\n  return (panelDim / maxValue) * value;\r\n}\r\n\r\nexport function createSVGPointsFromCert(\r\n  certificate: string,\r\n): [string, number[], CertificateBit[]] {\r\n  const verticalAdjust = 50;\r\n  const points: SVGPoint[] = [{ top: 0, left: 0 }];\r\n  const bits: CertificateBit[] = [{ value: '0', left: 0 }];\r\n  let top = 0;\r\n  let maxTop = top;\r\n  for (let i = 1; i < certificate.length; i++) {\r\n    bits.push({ value: certificate[i], left: i });\r\n    top += certificate[i - 1] === '1' ? -1 : 1;\r\n    maxTop = top > maxTop ? top : maxTop;\r\n    points.push({ left: i, top });\r\n  }\r\n\r\n  points.push({ left: certificate.length, top: 0 });\r\n  bits.push({ value: '-', left: certificate.length });\r\n\r\n  let strPoints = '';\r\n\r\n  points.forEach((point) => {\r\n    const top = normalize(point.left, points.length, SVG_DIMS.width);\r\n    const height = normalize(point.top, maxTop + 1, SVG_DIMS.height) + verticalAdjust;\r\n    strPoints = strPoints.concat(`${top},${height} `);\r\n  });\r\n  bits.forEach((bit) => (bit.left = normalize(bit.left, bits.length, SVG_DIMS.width)));\r\n\r\n  const levels: number[] = [];\r\n\r\n  for (let i = 0; i <= maxTop; i++) {\r\n    levels.push(normalize(i, maxTop + 1, SVG_DIMS.height) + verticalAdjust);\r\n  }\r\n\r\n  return [strPoints, levels, bits];\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { SVG_DIMS } from '../../utils/constants';\r\nimport { createSVGPointsFromCert } from './helpers';\r\n\r\ntype Props = { input: string };\r\n\r\nconst Board: React.FC<Props> = ({ input }) => {\r\n  const [points, levels, bits] = useMemo(() => createSVGPointsFromCert(input), [input]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <SVG {...SVG_DIMS} viewBox={`0 0 ${SVG_DIMS.width} ${SVG_DIMS.height}`}>\r\n        <defs>\r\n          <marker\r\n            id=\"circle\"\r\n            viewBox=\"0 0 10 10\"\r\n            refX=\"5\"\r\n            refY=\"5\"\r\n            markerWidth=\"8\"\r\n            markerHeight=\"8\"\r\n          >\r\n            <circle stroke=\"#2196f3\" strokeWidth=\"2\" fill=\"none\" cx=\"5\" cy=\"5\" r=\"4\" />\r\n          </marker>\r\n        </defs>\r\n        <SVGPolyline\r\n          points={points}\r\n          markerStart=\"url(#circle)\"\r\n          markerEnd=\"url(#circle)\"\r\n          markerMid=\"url(#circle)\"\r\n        />\r\n        {levels.map((levelValue) => (\r\n          <SVGLevelPolyline\r\n            key={levelValue}\r\n            points={`0,${levelValue} ${SVG_DIMS.width},${levelValue}`}\r\n          />\r\n        ))}\r\n        {bits.map((bit) => (\r\n          <SVGText x={bit.left} y=\"15\" key={bit.left}>\r\n            {bit.value === '1' ? ' |' : bit.value}\r\n          </SVGText>\r\n        ))}\r\n      </SVG>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\nconst Wrapper = styled.div`\r\n  overflow: hidden;\r\n  width: min-content;\r\n  padding: 1rem;\r\n  background-color: white;\r\n  padding: 0.5rem;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst SVG = styled.svg`\r\n  transform: scaleY(-1);\r\n`;\r\n\r\nconst SVGPolyline = styled.polyline`\r\n  stroke-width: 1.5;\r\n  fill-opacity: 0;\r\n  stroke: #2196f3;\r\n`;\r\n\r\nconst SVGLevelPolyline = styled(SVGPolyline)`\r\n  stroke-width: 1;\r\n  fill-opacity: 0;\r\n  stroke: #808080a6;\r\n  stroke-dasharray: 10;\r\n`;\r\n\r\nconst SVGText = styled.text`\r\n  stroke: grey;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Main } from '../../style/Main';\r\nimport Board from './Board';\r\nimport { FiX } from 'react-icons/fi';\r\n\r\ntype Props = { onClose: () => void };\r\n\r\nconst DrawBoard: React.FC<Props> = ({ onClose }) => {\r\n  const [inputValue, setInputValue] = useState('000101100110011100011011');\r\n\r\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CloseButton onClick={onClose}>\r\n        <FiX />\r\n      </CloseButton>\r\n      <Board input={inputValue} />\r\n      <Input type=\"text\" value={inputValue} onChange={handleInput} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default DrawBoard;\r\n\r\nconst Wrapper = styled(Main)`\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 17em;\r\n  height: 1.5rem;\r\n  border-width: 1px;\r\n  border-color: #8080804a;\r\n  border-radius: 0.2rem;\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  padding: 0.5rem;\r\n  margin: 0.5rem;\r\n  right: 0;\r\n  top: 0;\r\n  z-index: 1;\r\n  background-color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: #dbdbdb;\r\n  }\r\n  &:active {\r\n    background-color: #eeeded;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Main } from '../../style/Main';\r\nimport DrawBoard from '../DrawBoard';\r\nimport { FiPlus } from 'react-icons/fi';\r\n\r\nconst App: React.FC = () => {\r\n  const [boardIds, setBoardIds] = useState([0]);\r\n\r\n  const addDrawBoard = () => {\r\n    const newBoardIds = boardIds.concat(boardIds.length);\r\n    setBoardIds(newBoardIds);\r\n  };\r\n\r\n  const removeDrawBoard = (id: number) => {\r\n    const newBoardIds = boardIds.filter((boardId) => boardId !== id);\r\n    setBoardIds(newBoardIds);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {boardIds.map((id) => (\r\n        <DrawBoard key={id} onClose={() => removeDrawBoard(id)} />\r\n      ))}\r\n      <Placeholder onClick={addDrawBoard}>\r\n        <AddIcon />\r\n      </Placeholder>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 90vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  margin: auto;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Placeholder = styled(Main)`\r\n  box-shadow: inset 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n  background-color: #80808014;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0.7;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst AddIcon = styled(FiPlus)`\r\n  font-size: 6rem;\r\n  color: grey;\r\n`;\r\n","import { ReportHandler } from 'web-vitals';\r\n// eslint-disable-next-line\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}