{"version":3,"sources":["style/Main.tsx","utils/constants.ts","components/DrawBoard/helpers.ts","components/DrawBoard/Board.tsx","components/DrawBoard/index.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Main","styled","main","SVG_DIMS","width","height","BIT_Y","BIT_LINE_BOTTOM_END","scale","inputLength","flatInterval","maxValue","normalize","value","panelDim","Board","id","input","useMemo","certificate","points","top","left","bits","maxTop","i","length","push","strPoints","forEach","point","concat","bit","levels","createSVGPointsFromCert","svgPoints","markerSize","levelDashSize","bitLineDashSize","bitFontSize","withId","useCallback","markerId","Wrapper","SVG","viewBox","refX","refY","markerWidth","markerHeight","stroke","strokeWidth","fill","cx","cy","r","SVGPolyline","markerStart","markerEnd","markerMid","map","SVGBitPolyline","strokeDasharray","levelValue","SVGLevelPolyline","SVGText","x","y","fontSize","div","svg","polyline","text","DrawBoard","onClose","useState","inputValue","setInputValue","CloseButton","onClick","Input","type","onChange","event","target","button","App","boardIds","setBoardIds","lastId","setLastId","newBoardIds","filter","boardId","removeDrawBoard","Placeholder","console","log","AddIcon","FiPlus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b90e44a2.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Main = styled.main`\r\n  margin: 2rem;\r\n  display: flex;\r\n  min-width: 36rem;\r\n  height: 30rem;\r\n  overflow: hidden;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n  @media only screen and (max-width: 48rem) {\r\n    transform: scale(0.7);\r\n  }\r\n`;\r\n","export const SVG_DIMS = { width: 580, height: 400 };\r\nexport const VERTICAL_SHIFT = 50;\r\nexport const HORIZONTAL_SHIFT = 7;\r\nexport const BIT_LINE_TOP_PAD = 10;\r\nexport const BIT_Y = SVG_DIMS.height - 5;\r\nexport const BIT_FIX_X = -4;\r\nexport const BIT_LINE_BOTTOM_END = BIT_Y - 18;\r\n","import { HORIZONTAL_SHIFT, SVG_DIMS, VERTICAL_SHIFT } from '../../utils/constants';\r\n\r\ntype SVGPoint = { left: number; top: number };\r\ntype CertificateBit = { value: string; left: number };\r\n\r\nexport function scale(\r\n  inputLength: number,\r\n  flatInterval: number,\r\n  maxValue: number,\r\n): number {\r\n  return inputLength <= flatInterval ? maxValue : (maxValue * flatInterval) / inputLength;\r\n}\r\n\r\nexport function normalize(value: number, maxValue: number, panelDim: number): number {\r\n  return (panelDim / maxValue) * value;\r\n}\r\n\r\nexport function createSVGPointsFromCert(\r\n  certificate: string,\r\n): [string, SVGPoint[], number[], CertificateBit[]] {\r\n  const points: SVGPoint[] = [{ top: 0, left: 0 }];\r\n  const bits: CertificateBit[] = [{ value: '0', left: 0 }];\r\n  let top = 0;\r\n  let maxTop = top;\r\n\r\n  for (let i = 1; i < certificate.length; i++) {\r\n    bits.push({ value: certificate[i], left: i });\r\n    top += certificate[i - 1] === '1' ? -1 : 1;\r\n    maxTop = top > maxTop ? top : maxTop;\r\n    points.push({ left: i, top });\r\n  }\r\n\r\n  points.push({ left: certificate.length, top: 0 });\r\n  bits.push({ value: '-', left: certificate.length });\r\n\r\n  let strPoints = '';\r\n\r\n  points.forEach((point) => {\r\n    point.left = normalize(point.left, points.length, SVG_DIMS.width) + HORIZONTAL_SHIFT;\r\n    point.top =\r\n      SVG_DIMS.height -\r\n      (normalize(point.top, maxTop + 1, SVG_DIMS.height) + VERTICAL_SHIFT);\r\n    strPoints = strPoints.concat(`${point.left},${point.top} `);\r\n  });\r\n  bits.forEach(\r\n    (bit) =>\r\n      (bit.left = normalize(bit.left, bits.length, SVG_DIMS.width) + HORIZONTAL_SHIFT),\r\n  );\r\n\r\n  const levels: number[] = [];\r\n\r\n  for (let i = 0; i <= maxTop; i++) {\r\n    levels.push(\r\n      SVG_DIMS.height - (normalize(i, maxTop + 1, SVG_DIMS.height) + VERTICAL_SHIFT),\r\n    );\r\n  }\r\n\r\n  return [strPoints, points, levels, bits];\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  SVG_DIMS,\r\n  BIT_LINE_TOP_PAD,\r\n  BIT_LINE_BOTTOM_END,\r\n  BIT_Y,\r\n  BIT_FIX_X,\r\n} from '../../utils/constants';\r\nimport { createSVGPointsFromCert, scale } from './helpers';\r\n\r\ntype Props = { id: number; input: string };\r\n\r\nconst Board: React.FC<Props> = ({ id, input }) => {\r\n  const [strPoints, svgPoints, levels, bits] = useMemo(\r\n    () => createSVGPointsFromCert(input),\r\n    [input],\r\n  );\r\n\r\n  const markerSize = useMemo(() => scale(input.length, 20, 4), [input]);\r\n  const levelDashSize = useMemo(() => scale(input.length, 20, 10), [input]);\r\n  const bitLineDashSize = useMemo(() => scale(input.length, 20, 8), [input]);\r\n  const bitFontSize = useMemo(() => scale(input.length, 20, 16), [input]);\r\n\r\n  const withId = useCallback((value) => `${id}-${value}`, [id]);\r\n\r\n  const markerId = `circle${id}`;\r\n  return (\r\n    <Wrapper>\r\n      <SVG {...SVG_DIMS} viewBox={`0 0 ${SVG_DIMS.width} ${SVG_DIMS.height}`}>\r\n        <defs>\r\n          <marker\r\n            id={markerId}\r\n            viewBox=\"0 0 10 10\"\r\n            refX=\"5\"\r\n            refY=\"5\"\r\n            markerWidth=\"8\"\r\n            markerHeight=\"8\"\r\n          >\r\n            <circle\r\n              stroke=\"#2196f3\"\r\n              strokeWidth=\"2\"\r\n              fill=\"none\"\r\n              cx=\"5\"\r\n              cy=\"5\"\r\n              r={`${markerSize}`}\r\n            />\r\n          </marker>\r\n        </defs>\r\n        <SVGPolyline\r\n          points={strPoints}\r\n          markerStart={`url(#${markerId})`}\r\n          markerEnd={`url(#${markerId})`}\r\n          markerMid={`url(#${markerId})`}\r\n        />\r\n        {svgPoints.map((point) => (\r\n          <SVGBitPolyline\r\n            points={`${point.left},${point.top + BIT_LINE_TOP_PAD} ${\r\n              point.left\r\n            },${BIT_LINE_BOTTOM_END}`}\r\n            key={withId(`${point.left}${point.top}`)}\r\n            strokeDasharray={bitLineDashSize}\r\n          />\r\n        ))}\r\n        {levels.map((levelValue) => (\r\n          <SVGLevelPolyline\r\n            key={withId(levelValue)}\r\n            points={`0,${levelValue} ${SVG_DIMS.width},${levelValue}`}\r\n            strokeDasharray={levelDashSize}\r\n          />\r\n        ))}\r\n        {bits.map((bit) => (\r\n          <SVGText\r\n            x={bit.left + BIT_FIX_X}\r\n            y={BIT_Y}\r\n            key={bit.left}\r\n            fontSize={bitFontSize}\r\n          >\r\n            {bit.value}\r\n          </SVGText>\r\n        ))}\r\n      </SVG>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n\r\nconst Wrapper = styled.div`\r\n  overflow: hidden;\r\n  width: min-content;\r\n  padding: 1rem;\r\n  background-color: white;\r\n  padding: 0.5rem;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst SVG = styled.svg``;\r\n\r\nconst SVGPolyline = styled.polyline`\r\n  stroke-width: 1.5;\r\n  fill-opacity: 0;\r\n  stroke: #2196f3;\r\n`;\r\n\r\nconst SVGLevelPolyline = styled(SVGPolyline)`\r\n  stroke-width: 1;\r\n  fill-opacity: 0;\r\n  stroke: #808080a6;\r\n`;\r\n\r\nconst SVGBitPolyline = styled(SVGPolyline)`\r\n  stroke-width: 0.3;\r\n  fill-opacity: 0;\r\n  stroke: #808080a6;\r\n`;\r\n\r\nconst SVGText = styled.text`\r\n  stroke: grey;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Main } from '../../style/Main';\r\nimport Board from './Board';\r\nimport { FiX } from 'react-icons/fi';\r\n\r\ntype Props = { id: number; onClose: () => void };\r\n\r\nconst DrawBoard: React.FC<Props> = ({ id, onClose }) => {\r\n  const [inputValue, setInputValue] = useState('000101100110011100011011');\r\n\r\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CloseButton onClick={onClose}>\r\n        <FiX />\r\n      </CloseButton>\r\n      <Board id={id} input={inputValue} />\r\n      <Input type=\"text\" value={inputValue} onChange={handleInput} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default DrawBoard;\r\n\r\nconst Wrapper = styled(Main)`\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 17em;\r\n  height: 1.5rem;\r\n  border-width: 1px;\r\n  border-color: #8080804a;\r\n  border-radius: 0.2rem;\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  padding: 0.5rem;\r\n  margin: 0.5rem;\r\n  right: 0;\r\n  top: 0;\r\n  z-index: 1;\r\n  background-color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: center;\r\n  outline: none;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: #dbdbdb;\r\n  }\r\n  &:active {\r\n    background-color: #eeeded;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Main } from '../../style/Main';\r\nimport DrawBoard from '../DrawBoard';\r\nimport { FiPlus } from 'react-icons/fi';\r\n\r\nconst App: React.FC = () => {\r\n  const [boardIds, setBoardIds] = useState([0]);\r\n  const [lastId, setLastId] = useState(boardIds[0]);\r\n\r\n  const addDrawBoard = () => {\r\n    const newBoardIds = boardIds.concat(lastId + 1);\r\n    setLastId((lastId) => ++lastId);\r\n    setBoardIds(newBoardIds);\r\n    console.log(lastId);\r\n  };\r\n\r\n  const removeDrawBoard = (id: number) => {\r\n    const newBoardIds = boardIds.filter((boardId) => boardId !== id);\r\n    setBoardIds(newBoardIds);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {boardIds.map((id) => (\r\n        <DrawBoard key={id} id={id} onClose={() => removeDrawBoard(id)} />\r\n      ))}\r\n      <Placeholder onClick={addDrawBoard}>\r\n        <AddIcon />\r\n      </Placeholder>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 90vw;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  margin: auto;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  @media only screen and (max-width: 48rem) {\r\n    width: min-content;\r\n  }\r\n`;\r\n\r\nconst Placeholder = styled(Main)`\r\n  box-shadow: inset 0px 0px 5px 0px rgba(0, 0, 0, 0.25);\r\n  background-color: #80808014;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0.7;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst AddIcon = styled(FiPlus)`\r\n  font-size: 6rem;\r\n  color: grey;\r\n`;\r\n","import { ReportHandler } from 'web-vitals';\r\n// eslint-disable-next-line\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}